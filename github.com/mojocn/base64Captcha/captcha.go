// Copyright 2014 Eric Zhou. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package base64Captcha create base64 encoding captcha png.
// designed for APPs service.
// 创建base64格式图像验证码,为APIs服务而设计.
package base64Captcha

import (
	"bytes"
	"time"
)

var (
	// DefaultLen Default number of digits in captcha solution.
	// 默认数字验证长度.
	DefaultLen = 6
	// CollectNum The number of captchas created that triggers garbage collection used by default store.
	// 默认图像验证GC清理的上限个数
	CollectNum = 100000
	// Expiration time of captchas used by default store.
	// 内存保存验证码的时限
	Expiration = 10 * time.Minute
	// globalStore is a shared storage for captchas, generated by New function.
	// 默认内存储存
	globalStore = NewMemoryStore(CollectNum, Expiration)
	// PngWidth Captcha png width in pixel.
	// 图像验证码的宽度像素
	PngWidth = 240
	// PngHeight png height in pixel.
	// 图像验证码的高度像素.
	PngHeight = 80
	// MaxSkew max absolute skew factor of a single digit.
	// 图像验证码的最大干扰洗漱.
	MaxSkew = 0.7
	// DotCount Number of background circles.
	// 图像验证码干扰圆点的数量.
	DotCount = 20
)

// VerifyCaptcha the captcha image.
// identifier is the key of the captcha.
// digits numbers in captcha image.
// return boolean value.
// 验证图像验证码,返回boolean.
func VerifyCaptcha(identifier, digits string) bool {
	if digits == "" {
		return false
	}
	digitsBytes := make([]byte, len(digits))
	for i := range digitsBytes {
		d := digits[i]
		switch {
		case '0' <= d && d <= '9':
			digitsBytes[i] = d - '0'
		case d == ' ' || d == ',':
			// ignore
		default:
			return false
		}
	}
	if digitsBytes == nil || len(digits) == 0 {
		return false
	}
	reald := globalStore.Get(identifier, false)
	if reald == nil {
		return false
	}
	result := bytes.Equal(digitsBytes, reald)
	if result {
		globalStore.Get(identifier, true)

	}
	return result
}

// GenerateCaptchaPngBase64String customize captcha image by identifier, width, height, dot-count, digits-length, skew-factor.
// default settings width=240 height=70 dot-count=20 digits-len=6 skew-factor=0.7.
// return base64 png string.
// 自定义参数返回base64编码的图像验证码
func GenerateCaptchaPngBase64String(identifier string, pngWidth, pngHeight, dotCount, digitsLen int, maxSkew float64) string {
	PngWidth = pngWidth
	PngHeight = pngHeight
	DotCount = dotCount
	MaxSkew = maxSkew
	DefaultLen = digitsLen
	return GenerateCaptchaPngBase64StringDefault(identifier)
}

// GenerateCaptchaPngBase64StringDefault use default value create captcha png by identifier string.
// return base64 png string.
// 默认参数生成数字图像验证码
func GenerateCaptchaPngBase64StringDefault(identifier string) string {
	digits := RandomDigits(DefaultLen)
	globalStore.Set(identifier, digits)
	base64Png := NewImage(identifier, digits, PngWidth, PngHeight).WriteToBase64String()
	return base64Png
}
